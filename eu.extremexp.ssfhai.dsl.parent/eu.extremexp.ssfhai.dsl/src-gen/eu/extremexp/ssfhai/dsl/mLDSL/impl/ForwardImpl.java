/**
 * generated by Xtext 2.40.0.M3
 */
package eu.extremexp.ssfhai.dsl.mLDSL.impl;

import eu.extremexp.ssfhai.dsl.mLDSL.Forward;
import eu.extremexp.ssfhai.dsl.mLDSL.Layer;
import eu.extremexp.ssfhai.dsl.mLDSL.MLDSLPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Forward</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eu.extremexp.ssfhai.dsl.mLDSL.impl.ForwardImpl#getSequenceStart <em>Sequence Start</em>}</li>
 *   <li>{@link eu.extremexp.ssfhai.dsl.mLDSL.impl.ForwardImpl#getSequence <em>Sequence</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForwardImpl extends MinimalEObjectImpl.Container implements Forward
{
  /**
   * The cached value of the '{@link #getSequenceStart() <em>Sequence Start</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSequenceStart()
   * @generated
   * @ordered
   */
  protected Layer sequenceStart;

  /**
   * The cached value of the '{@link #getSequence() <em>Sequence</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSequence()
   * @generated
   * @ordered
   */
  protected EList<Layer> sequence;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForwardImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MLDSLPackage.Literals.FORWARD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Layer getSequenceStart()
  {
    if (sequenceStart != null && sequenceStart.eIsProxy())
    {
      InternalEObject oldSequenceStart = (InternalEObject)sequenceStart;
      sequenceStart = (Layer)eResolveProxy(oldSequenceStart);
      if (sequenceStart != oldSequenceStart)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MLDSLPackage.FORWARD__SEQUENCE_START, oldSequenceStart, sequenceStart));
      }
    }
    return sequenceStart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Layer basicGetSequenceStart()
  {
    return sequenceStart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSequenceStart(Layer newSequenceStart)
  {
    Layer oldSequenceStart = sequenceStart;
    sequenceStart = newSequenceStart;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLDSLPackage.FORWARD__SEQUENCE_START, oldSequenceStart, sequenceStart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Layer> getSequence()
  {
    if (sequence == null)
    {
      sequence = new EObjectResolvingEList<Layer>(Layer.class, this, MLDSLPackage.FORWARD__SEQUENCE);
    }
    return sequence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MLDSLPackage.FORWARD__SEQUENCE_START:
        if (resolve) return getSequenceStart();
        return basicGetSequenceStart();
      case MLDSLPackage.FORWARD__SEQUENCE:
        return getSequence();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MLDSLPackage.FORWARD__SEQUENCE_START:
        setSequenceStart((Layer)newValue);
        return;
      case MLDSLPackage.FORWARD__SEQUENCE:
        getSequence().clear();
        getSequence().addAll((Collection<? extends Layer>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MLDSLPackage.FORWARD__SEQUENCE_START:
        setSequenceStart((Layer)null);
        return;
      case MLDSLPackage.FORWARD__SEQUENCE:
        getSequence().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MLDSLPackage.FORWARD__SEQUENCE_START:
        return sequenceStart != null;
      case MLDSLPackage.FORWARD__SEQUENCE:
        return sequence != null && !sequence.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ForwardImpl
