/**
 * generated by Xtext 2.40.0.M3
 */
package eu.extremexp.ssfhai.dsl.mLDSL.impl;

import eu.extremexp.ssfhai.dsl.mLDSL.Forward;
import eu.extremexp.ssfhai.dsl.mLDSL.Layer;
import eu.extremexp.ssfhai.dsl.mLDSL.MLDSLPackage;
import eu.extremexp.ssfhai.dsl.mLDSL.Network;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Network</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eu.extremexp.ssfhai.dsl.mLDSL.impl.NetworkImpl#getLayers <em>Layers</em>}</li>
 *   <li>{@link eu.extremexp.ssfhai.dsl.mLDSL.impl.NetworkImpl#getForwards <em>Forwards</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NetworkImpl extends WorkflowEntintyImpl implements Network
{
  /**
   * The cached value of the '{@link #getLayers() <em>Layers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLayers()
   * @generated
   * @ordered
   */
  protected EList<Layer> layers;

  /**
   * The cached value of the '{@link #getForwards() <em>Forwards</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForwards()
   * @generated
   * @ordered
   */
  protected EList<Forward> forwards;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NetworkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MLDSLPackage.Literals.NETWORK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Layer> getLayers()
  {
    if (layers == null)
    {
      layers = new EObjectContainmentEList<Layer>(Layer.class, this, MLDSLPackage.NETWORK__LAYERS);
    }
    return layers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Forward> getForwards()
  {
    if (forwards == null)
    {
      forwards = new EObjectContainmentEList<Forward>(Forward.class, this, MLDSLPackage.NETWORK__FORWARDS);
    }
    return forwards;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MLDSLPackage.NETWORK__LAYERS:
        return ((InternalEList<?>)getLayers()).basicRemove(otherEnd, msgs);
      case MLDSLPackage.NETWORK__FORWARDS:
        return ((InternalEList<?>)getForwards()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MLDSLPackage.NETWORK__LAYERS:
        return getLayers();
      case MLDSLPackage.NETWORK__FORWARDS:
        return getForwards();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MLDSLPackage.NETWORK__LAYERS:
        getLayers().clear();
        getLayers().addAll((Collection<? extends Layer>)newValue);
        return;
      case MLDSLPackage.NETWORK__FORWARDS:
        getForwards().clear();
        getForwards().addAll((Collection<? extends Forward>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MLDSLPackage.NETWORK__LAYERS:
        getLayers().clear();
        return;
      case MLDSLPackage.NETWORK__FORWARDS:
        getForwards().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MLDSLPackage.NETWORK__LAYERS:
        return layers != null && !layers.isEmpty();
      case MLDSLPackage.NETWORK__FORWARDS:
        return forwards != null && !forwards.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //NetworkImpl
