/*
 * generated by Xtext 2.40.0.M3
 */
package eu.extremexp.ssfhai.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import eu.extremexp.ssfhai.dsl.ide.contentassist.antlr.internal.InternalMLDSLParser;
import eu.extremexp.ssfhai.dsl.services.MLDSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MLDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MLDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MLDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getWorkflowAccess().getAlternatives_3(), "rule__Workflow__Alternatives_3");
			builder.put(grammarAccess.getWorkflowEntintyAccess().getAlternatives(), "rule__WorkflowEntinty__Alternatives");
			builder.put(grammarAccess.getParamAccess().getAlternatives(), "rule__Param__Alternatives");
			builder.put(grammarAccess.getNetworkAccess().getAlternatives_3(), "rule__Network__Alternatives_3");
			builder.put(grammarAccess.getOptionAccess().getAlternatives(), "rule__Option__Alternatives");
			builder.put(grammarAccess.getParamValueAccess().getAlternatives(), "rule__ParamValue__Alternatives");
			builder.put(grammarAccess.getLayerTypeAccess().getAlternatives(), "rule__LayerType__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getWorkflowAccess().getGroup(), "rule__Workflow__Group__0");
			builder.put(grammarAccess.getDataAccess().getGroup_0(), "rule__Data__Group_0__0");
			builder.put(grammarAccess.getDataAccess().getGroup_1(), "rule__Data__Group_1__0");
			builder.put(grammarAccess.getDataAccess().getGroup_2(), "rule__Data__Group_2__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getParamAccess().getGroup_0(), "rule__Param__Group_0__0");
			builder.put(grammarAccess.getParamAccess().getGroup_1(), "rule__Param__Group_1__0");
			builder.put(grammarAccess.getFlowAccess().getGroup(), "rule__Flow__Group__0");
			builder.put(grammarAccess.getFlowAccess().getGroup_1(), "rule__Flow__Group_1__0");
			builder.put(grammarAccess.getNetworkAccess().getGroup(), "rule__Network__Group__0");
			builder.put(grammarAccess.getLayerAccess().getGroup(), "rule__Layer__Group__0");
			builder.put(grammarAccess.getLayerAccess().getGroup_2(), "rule__Layer__Group_2__0");
			builder.put(grammarAccess.getLayerAccess().getGroup_2_2(), "rule__Layer__Group_2_2__0");
			builder.put(grammarAccess.getForwardAccess().getGroup(), "rule__Forward__Group__0");
			builder.put(grammarAccess.getForwardAccess().getGroup_1(), "rule__Forward__Group_1__0");
			builder.put(grammarAccess.getFLOATAccess().getGroup(), "rule__FLOAT__Group__0");
			builder.put(grammarAccess.getOptionAccess().getGroup_0(), "rule__Option__Group_0__0");
			builder.put(grammarAccess.getOptionAccess().getGroup_1(), "rule__Option__Group_1__0");
			builder.put(grammarAccess.getOptionAccess().getGroup_2(), "rule__Option__Group_2__0");
			builder.put(grammarAccess.getOptionAccess().getGroup_3(), "rule__Option__Group_3__0");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
			builder.put(grammarAccess.getModelAccess().getWorkflowsAssignment_3(), "rule__Model__WorkflowsAssignment_3");
			builder.put(grammarAccess.getWorkflowAccess().getNameAssignment_1(), "rule__Workflow__NameAssignment_1");
			builder.put(grammarAccess.getWorkflowAccess().getTasksAssignment_3_0(), "rule__Workflow__TasksAssignment_3_0");
			builder.put(grammarAccess.getWorkflowAccess().getFlowsAssignment_3_1(), "rule__Workflow__FlowsAssignment_3_1");
			builder.put(grammarAccess.getWorkflowAccess().getDataAssignment_3_2(), "rule__Workflow__DataAssignment_3_2");
			builder.put(grammarAccess.getWorkflowAccess().getNetworksAssignment_3_3(), "rule__Workflow__NetworksAssignment_3_3");
			builder.put(grammarAccess.getDataAccess().getNameAssignment_0_1(), "rule__Data__NameAssignment_0_1");
			builder.put(grammarAccess.getDataAccess().getPathAssignment_0_4(), "rule__Data__PathAssignment_0_4");
			builder.put(grammarAccess.getDataAccess().getFeaturesAssignment_1_1(), "rule__Data__FeaturesAssignment_1_1");
			builder.put(grammarAccess.getDataAccess().getTargetAssignment_2_1(), "rule__Data__TargetAssignment_2_1");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getParamsAssignment_3(), "rule__Task__ParamsAssignment_3");
			builder.put(grammarAccess.getParamAccess().getNameAssignment_0_1(), "rule__Param__NameAssignment_0_1");
			builder.put(grammarAccess.getParamAccess().getParamValueAssignment_0_3(), "rule__Param__ParamValueAssignment_0_3");
			builder.put(grammarAccess.getParamAccess().getNameAssignment_1_1(), "rule__Param__NameAssignment_1_1");
			builder.put(grammarAccess.getParamAccess().getEntityValueAssignment_1_3(), "rule__Param__EntityValueAssignment_1_3");
			builder.put(grammarAccess.getFlowAccess().getSequenceStartAssignment_0(), "rule__Flow__SequenceStartAssignment_0");
			builder.put(grammarAccess.getFlowAccess().getSequenceAssignment_1_1(), "rule__Flow__SequenceAssignment_1_1");
			builder.put(grammarAccess.getNetworkAccess().getNameAssignment_1(), "rule__Network__NameAssignment_1");
			builder.put(grammarAccess.getNetworkAccess().getLayersAssignment_3_0(), "rule__Network__LayersAssignment_3_0");
			builder.put(grammarAccess.getNetworkAccess().getForwardsAssignment_3_1(), "rule__Network__ForwardsAssignment_3_1");
			builder.put(grammarAccess.getLayerAccess().getNameAssignment_1(), "rule__Layer__NameAssignment_1");
			builder.put(grammarAccess.getLayerAccess().getOptionsAssignment_2_1(), "rule__Layer__OptionsAssignment_2_1");
			builder.put(grammarAccess.getLayerAccess().getOptionsAssignment_2_2_1(), "rule__Layer__OptionsAssignment_2_2_1");
			builder.put(grammarAccess.getForwardAccess().getSequenceStartAssignment_0(), "rule__Forward__SequenceStartAssignment_0");
			builder.put(grammarAccess.getForwardAccess().getSequenceAssignment_1_1(), "rule__Forward__SequenceAssignment_1_1");
			builder.put(grammarAccess.getFLOATAccess().getDecAssignment_0(), "rule__FLOAT__DecAssignment_0");
			builder.put(grammarAccess.getFLOATAccess().getPerAssignment_2(), "rule__FLOAT__PerAssignment_2");
			builder.put(grammarAccess.getOptionAccess().getTypeAssignment_0_2(), "rule__Option__TypeAssignment_0_2");
			builder.put(grammarAccess.getOptionAccess().getInputSizeAssignment_1_2(), "rule__Option__InputSizeAssignment_1_2");
			builder.put(grammarAccess.getOptionAccess().getOutputSizeAssignment_2_2(), "rule__Option__OutputSizeAssignment_2_2");
			builder.put(grammarAccess.getOptionAccess().getDropeoutRateAssignment_3_2(), "rule__Option__DropeoutRateAssignment_3_2");
			builder.put(grammarAccess.getParamValueAccess().getIntValueAssignment_0(), "rule__ParamValue__IntValueAssignment_0");
			builder.put(grammarAccess.getParamValueAccess().getFloatValueAssignment_1(), "rule__ParamValue__FloatValueAssignment_1");
			builder.put(grammarAccess.getParamValueAccess().getStringValueAssignment_2(), "rule__ParamValue__StringValueAssignment_2");
			builder.put(grammarAccess.getDataAccess().getUnorderedGroup(), "rule__Data__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MLDSLGrammarAccess grammarAccess;

	@Override
	protected InternalMLDSLParser createParser() {
		InternalMLDSLParser result = new InternalMLDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MLDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MLDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
